; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }
%complex_8 = type { double, double }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [10 x i8] c"%23.17e%s\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"(%lf,%lf)%s\00", align 1
@9 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@10 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define float @_lcompilers_abs_f32(float* %x) {
.entry:
  %_lcompilers_abs_f32 = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  store float %2, float* %_lcompilers_abs_f32, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* %_lcompilers_abs_f32, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %_lcompilers_abs_f32, align 4
  ret float %5
}

define double @_lcompilers_abs_f64(double* %x) {
.entry:
  %_lcompilers_abs_f64 = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fsub double 0.000000e+00, %3
  store double %4, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %_lcompilers_abs_f64, align 8
  ret double %5
}

define %complex_4 @_lcompilers_tan_c32(%complex_4* %x) {
.entry:
  %_lcompilers_tan_c32 = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to [2 x float]*
  %1 = load [2 x float], [2 x float]* %0, align 4
  %2 = call %complex_4 @_lfortran_ctan([2 x float] %1)
  store %complex_4 %2, %complex_4* %_lcompilers_tan_c32, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load %complex_4, %complex_4* %_lcompilers_tan_c32, align 4
  ret %complex_4 %3
}

declare %complex_4 @_lfortran_ctan([2 x float])

define %complex_8 @_lcompilers_tan_c64(%complex_8* %x) {
.entry:
  %_lcompilers_tan_c64 = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_ztan(%complex_8 %0)
  store %complex_8 %1, %complex_8* %_lcompilers_tan_c64, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %_lcompilers_tan_c64, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_ztan(%complex_8)

define float @_lcompilers_tan_f32(float* %x) {
.entry:
  %_lcompilers_tan_f32 = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_stan(float %0)
  store float %1, float* %_lcompilers_tan_f32, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %_lcompilers_tan_f32, align 4
  ret float %2
}

declare float @_lfortran_stan(float)

define double @_lcompilers_tan_f64(double* %x) {
.entry:
  %_lcompilers_tan_f64 = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dtan(double %0)
  store double %1, double* %_lcompilers_tan_f64, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %_lcompilers_tan_f64, align 8
  ret double %2
}

declare double @_lfortran_dtan(double)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value10 = alloca double, align 8
  %call_arg_value6 = alloca float, align 4
  %call_arg_value5 = alloca float, align 4
  %call_arg_value4 = alloca double, align 8
  %call_arg_value = alloca double, align 8
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %x = alloca double, align 8
  %z = alloca %complex_8, align 8
  store double 1.500000e+00, double* %x, align 8
  %2 = call double @_lcompilers_tan_f64(double* %x)
  store double %2, double* %x, align 8
  %3 = load double, double* %x, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i32 0, i32 0), double %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %4 = load double, double* %x, align 8
  %5 = fsub double %4, 0x402C33ED50B88778
  store double %5, double* %call_arg_value, align 8
  %6 = call double @_lcompilers_abs_f64(double* %call_arg_value)
  %7 = fcmp ugt double %6, 1.000000e-10
  br i1 %7, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br i1 false, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %8 = load double, double* %x, align 8
  %9 = call double @_lcompilers_tan_f64(double* %x)
  %10 = fadd double %8, %9
  store double %10, double* %call_arg_value4, align 8
  %11 = call double @_lcompilers_tan_f64(double* %call_arg_value4)
  %12 = fptrunc double %11 to float
  %13 = fadd float 0x402C33ED60000000, %12
  store float %13, float* %call_arg_value5, align 4
  %14 = call float @_lcompilers_tan_f32(float* %call_arg_value5)
  %15 = fsub float %14, 0x400209E1C0000000
  store float %15, float* %call_arg_value6, align 4
  %16 = call float @_lcompilers_abs_f32(float* %call_arg_value6)
  %17 = fcmp ugt float %16, 0x3EE4F8B580000000
  br i1 %17, label %then7, label %else8

then7:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont9

else8:                                            ; preds = %ifcont3
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %18 = alloca %complex_8, align 8
  %19 = getelementptr %complex_8, %complex_8* %18, i32 0, i32 0
  %20 = getelementptr %complex_8, %complex_8* %18, i32 0, i32 1
  store double 1.500000e+00, double* %19, align 8
  store double 3.500000e+00, double* %20, align 8
  %21 = load %complex_8, %complex_8* %18, align 8
  store %complex_8 %21, %complex_8* %z, align 8
  %22 = call %complex_8 @_lcompilers_tan_c64(%complex_8* %z)
  store %complex_8 %22, %complex_8* %z, align 8
  %23 = load %complex_8, %complex_8* %z, align 8
  %24 = alloca %complex_8, align 8
  store %complex_8 %23, %complex_8* %24, align 8
  %25 = getelementptr %complex_8, %complex_8* %24, i32 0, i32 0
  %26 = load double, double* %25, align 8
  %27 = alloca %complex_8, align 8
  store %complex_8 %23, %complex_8* %27, align 8
  %28 = getelementptr %complex_8, %complex_8* %27, i32 0, i32 1
  %29 = load double, double* %28, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0), double %26, double %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %30 = load %complex_8, %complex_8* %z, align 8
  %31 = alloca %complex_8, align 8
  store %complex_8 %30, %complex_8* %31, align 8
  %32 = getelementptr %complex_8, %complex_8* %31, i32 0, i32 0
  %33 = load double, double* %32, align 8
  %34 = fsub double %33, 0x3F30E5C06C0C177D
  store double %34, double* %call_arg_value10, align 8
  %35 = call double @_lcompilers_abs_f64(double* %call_arg_value10)
  %36 = fcmp ugt double %35, 1.000000e-10
  br i1 %36, label %then11, label %else12

then11:                                           ; preds = %ifcont9
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont13

else12:                                           ; preds = %ifcont9
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %then11
  br i1 false, label %then14, label %else15

then14:                                           ; preds = %ifcont13
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont16

else15:                                           ; preds = %ifcont13
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then14
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)
