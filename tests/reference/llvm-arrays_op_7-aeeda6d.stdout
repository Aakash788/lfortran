; ModuleID = 'LFortran'
source_filename = "LFortran"

%dimension_descriptor = type { i32, i32, i32, i32 }
%array = type { i32*, i32, %dimension_descriptor*, i1 }

@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define i32 @__module_lfortran_intrinsic_builtin_lbound(%dimension_descriptor** %x, i32* %dim) {
.entry:
  %lbound = alloca i32, align 4
  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8
  %1 = load i32, i32* %dim, align 4
  %2 = sub i32 %1, 1
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %lbound, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load i32, i32* %lbound, align 4
  ret i32 %6
}

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

define i32 @__module_lfortran_intrinsic_builtin_ubound(%dimension_descriptor** %x, i32* %dim) {
.entry:
  %ubound = alloca i32, align 4
  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8
  %1 = load i32, i32* %dim, align 4
  %2 = sub i32 %1, 1
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %ubound, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load i32, i32* %ubound, align 4
  ret i32 %6
}

define void @f(%array* %x, %array* %y) {
.entry:
  %"1_k" = alloca i32, align 4
  %0 = alloca %dimension_descriptor*, align 8
  %1 = getelementptr %array, %array* %y, i32 0, i32 2
  %2 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  store %dimension_descriptor* %2, %dimension_descriptor** %0, align 8
  %3 = alloca i32, align 4
  store i32 1, i32* %3, align 4
  %4 = call i32 @__module_lfortran_intrinsic_builtin_lbound(%dimension_descriptor** %0, i32* %3)
  %5 = sub i32 %4, 1
  store i32 %5, i32* %"1_k", align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %6 = load i32, i32* %"1_k", align 4
  %7 = add i32 %6, 1
  %8 = alloca %dimension_descriptor*, align 8
  %9 = getelementptr %array, %array* %y, i32 0, i32 2
  %10 = load %dimension_descriptor*, %dimension_descriptor** %9, align 8
  store %dimension_descriptor* %10, %dimension_descriptor** %8, align 8
  %11 = alloca i32, align 4
  store i32 1, i32* %11, align 4
  %12 = call i32 @__module_lfortran_intrinsic_builtin_ubound(%dimension_descriptor** %8, i32* %11)
  %13 = icmp sle i32 %7, %12
  br i1 %13, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %14 = load i32, i32* %"1_k", align 4
  %15 = add i32 %14, 1
  store i32 %15, i32* %"1_k", align 4
  %16 = load i32, i32* %"1_k", align 4
  %17 = getelementptr %array, %array* %y, i32 0, i32 2
  %18 = load %dimension_descriptor*, %dimension_descriptor** %17, align 8
  %19 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %18, i32 0
  %20 = getelementptr %dimension_descriptor, %dimension_descriptor* %19, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 %16, %21
  %23 = mul i32 1, %22
  %24 = add i32 0, %23
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %19, i32 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = mul i32 1, %26
  %28 = getelementptr %array, %array* %y, i32 0, i32 0
  %29 = load i32*, i32** %28, align 8
  %30 = getelementptr inbounds i32, i32* %29, i32 %24
  %31 = load i32, i32* %"1_k", align 4
  %32 = getelementptr %array, %array* %x, i32 0, i32 2
  %33 = load %dimension_descriptor*, %dimension_descriptor** %32, align 8
  %34 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %33, i32 0
  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 %31, %36
  %38 = mul i32 1, %37
  %39 = add i32 0, %38
  %40 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = mul i32 1, %41
  %43 = getelementptr %array, %array* %x, i32 0, i32 0
  %44 = load i32*, i32** %43, align 8
  %45 = getelementptr inbounds i32, i32* %44, i32 %39
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %30, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  ret void
}

define i32 @main() {
.entry:
  %"1_k" = alloca i32, align 4
  %x = alloca %array, align 8
  %0 = getelementptr %array, %array* %x, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %x, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %5 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %6 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %5, i32 0
  %7 = getelementptr %dimension_descriptor, %dimension_descriptor* %6, i32 0, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %6, i32 0, i32 1
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %6, i32 0, i32 2
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %6, i32 0, i32 3
  store i32 1, i32* %7, align 4
  store i32 1, i32* %8, align 4
  store i32 3, i32* %9, align 4
  %11 = load i32, i32* %9, align 4
  %12 = load i32, i32* %8, align 4
  %13 = sub i32 %11, %12
  %14 = add i32 %13, 1
  store i32 %14, i32* %10, align 4
  %15 = alloca i32, align 4
  store i32 3, i32* %15, align 4
  %16 = getelementptr %array, %array* %x, i32 0, i32 0
  %17 = load i32, i32* %15, align 4
  %18 = alloca i32, i32 %17, align 4
  store i32* %18, i32** %16, align 8
  %y = alloca %array, align 8
  %19 = getelementptr %array, %array* %y, i32 0, i32 1
  store i32 0, i32* %19, align 4
  %20 = getelementptr %array, %array* %y, i32 0, i32 2
  %21 = alloca i32, align 4
  store i32 1, i32* %21, align 4
  %22 = load i32, i32* %21, align 4
  %23 = alloca %dimension_descriptor, i32 %22, align 8
  store %dimension_descriptor* %23, %dimension_descriptor** %20, align 8
  %24 = load %dimension_descriptor*, %dimension_descriptor** %20, align 8
  %25 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %24, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 0
  %27 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 1
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 2
  %29 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 3
  store i32 1, i32* %26, align 4
  store i32 1, i32* %27, align 4
  store i32 3, i32* %28, align 4
  %30 = load i32, i32* %28, align 4
  %31 = load i32, i32* %27, align 4
  %32 = sub i32 %30, %31
  %33 = add i32 %32, 1
  store i32 %33, i32* %29, align 4
  %34 = alloca i32, align 4
  store i32 3, i32* %34, align 4
  %35 = getelementptr %array, %array* %y, i32 0, i32 0
  %36 = load i32, i32* %34, align 4
  %37 = alloca i32, i32 %36, align 4
  store i32* %37, i32** %35, align 8
  %38 = alloca %dimension_descriptor*, align 8
  %39 = getelementptr %array, %array* %x, i32 0, i32 2
  %40 = load %dimension_descriptor*, %dimension_descriptor** %39, align 8
  store %dimension_descriptor* %40, %dimension_descriptor** %38, align 8
  %41 = alloca i32, align 4
  store i32 1, i32* %41, align 4
  %42 = call i32 @__module_lfortran_intrinsic_builtin_lbound(%dimension_descriptor** %38, i32* %41)
  %43 = sub i32 %42, 1
  store i32 %43, i32* %"1_k", align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %44 = load i32, i32* %"1_k", align 4
  %45 = add i32 %44, 1
  %46 = alloca %dimension_descriptor*, align 8
  %47 = getelementptr %array, %array* %x, i32 0, i32 2
  %48 = load %dimension_descriptor*, %dimension_descriptor** %47, align 8
  store %dimension_descriptor* %48, %dimension_descriptor** %46, align 8
  %49 = alloca i32, align 4
  store i32 1, i32* %49, align 4
  %50 = call i32 @__module_lfortran_intrinsic_builtin_ubound(%dimension_descriptor** %46, i32* %49)
  %51 = icmp sle i32 %45, %50
  br i1 %51, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %52 = load i32, i32* %"1_k", align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %"1_k", align 4
  %54 = load i32, i32* %"1_k", align 4
  %55 = getelementptr %array, %array* %x, i32 0, i32 2
  %56 = load %dimension_descriptor*, %dimension_descriptor** %55, align 8
  %57 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %56, i32 0
  %58 = getelementptr %dimension_descriptor, %dimension_descriptor* %57, i32 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = sub i32 %54, %59
  %61 = mul i32 1, %60
  %62 = add i32 0, %61
  %63 = getelementptr %dimension_descriptor, %dimension_descriptor* %57, i32 0, i32 3
  %64 = load i32, i32* %63, align 4
  %65 = mul i32 1, %64
  %66 = getelementptr %array, %array* %x, i32 0, i32 0
  %67 = load i32*, i32** %66, align 8
  %68 = getelementptr inbounds i32, i32* %67, i32 %62
  store i32 3, i32* %68, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %69 = alloca %array, align 8
  %70 = alloca %array, align 8
  call void @f(%array* %x, %array* %y)
  %71 = alloca %dimension_descriptor*, align 8
  %72 = getelementptr %array, %array* %y, i32 0, i32 2
  %73 = load %dimension_descriptor*, %dimension_descriptor** %72, align 8
  store %dimension_descriptor* %73, %dimension_descriptor** %71, align 8
  %74 = alloca i32, align 4
  store i32 1, i32* %74, align 4
  %75 = call i32 @__module_lfortran_intrinsic_builtin_lbound(%dimension_descriptor** %71, i32* %74)
  %76 = sub i32 %75, 1
  store i32 %76, i32* %"1_k", align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body2, %loop.end
  %77 = load i32, i32* %"1_k", align 4
  %78 = add i32 %77, 1
  %79 = alloca %dimension_descriptor*, align 8
  %80 = getelementptr %array, %array* %y, i32 0, i32 2
  %81 = load %dimension_descriptor*, %dimension_descriptor** %80, align 8
  store %dimension_descriptor* %81, %dimension_descriptor** %79, align 8
  %82 = alloca i32, align 4
  store i32 1, i32* %82, align 4
  %83 = call i32 @__module_lfortran_intrinsic_builtin_ubound(%dimension_descriptor** %79, i32* %82)
  %84 = icmp sle i32 %78, %83
  br i1 %84, label %loop.body2, label %loop.end3

loop.body2:                                       ; preds = %loop.head1
  %85 = load i32, i32* %"1_k", align 4
  %86 = add i32 %85, 1
  store i32 %86, i32* %"1_k", align 4
  %87 = load i32, i32* %"1_k", align 4
  %88 = getelementptr %array, %array* %y, i32 0, i32 2
  %89 = load %dimension_descriptor*, %dimension_descriptor** %88, align 8
  %90 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %89, i32 0
  %91 = getelementptr %dimension_descriptor, %dimension_descriptor* %90, i32 0, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = sub i32 %87, %92
  %94 = mul i32 1, %93
  %95 = add i32 0, %94
  %96 = getelementptr %dimension_descriptor, %dimension_descriptor* %90, i32 0, i32 3
  %97 = load i32, i32* %96, align 4
  %98 = mul i32 1, %97
  %99 = getelementptr %array, %array* %y, i32 0, i32 0
  %100 = load i32*, i32** %99, align 8
  %101 = getelementptr inbounds i32, i32* %100, i32 %95
  %102 = load i32, i32* %101, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %102)
  br label %loop.head1

loop.end3:                                        ; preds = %loop.head1
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
