; ModuleID = 'LFortran'
source_filename = "LFortran"

%fpm_run_settings_polymorphic = type { i64, %fpm_run_settings* }
%fpm_run_settings = type { %fpm_build_settings, [2 x i8*], i8*, i8*, i1 }
%fpm_build_settings = type { i1 }
%__vtab_fpm_run_settings = type { i64 }

define void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %settings, i1* %test) {
.entry:
  %0 = alloca %__vtab_fpm_run_settings, align 8
  %1 = getelementptr %__vtab_fpm_run_settings, %__vtab_fpm_run_settings* %0, i32 0, i32 0
  store i64 0, i64* %1, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca i1, align 1
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %settings = alloca %fpm_run_settings, align 8
  %2 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 2
  %3 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 4
  %4 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 1
  %5 = getelementptr %fpm_run_settings, %fpm_run_settings* %settings, i32 0, i32 3
  %6 = alloca %fpm_run_settings_polymorphic, align 8
  %7 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %6, i32 0, i32 0
  store i64 0, i64* %7, align 4
  %8 = getelementptr %fpm_run_settings_polymorphic, %fpm_run_settings_polymorphic* %6, i32 0, i32 1
  store %fpm_run_settings* %settings, %fpm_run_settings** %8, align 8
  store i1 true, i1* %call_arg_value, align 1
  call void @__module_modules_36_fpm_main_01_cmd_run(%fpm_run_settings_polymorphic* %6, i1* %call_arg_value)
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)
