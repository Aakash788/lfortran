; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [3 x i8] c"l1\00", align 1
@3 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [9 x i8] c"error l1\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c" \00", align 1
@9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@10 = private unnamed_addr constant [5 x i8] c"pass\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %l1.head

l1.head:                                          ; preds = %ifcont3, %.entry
  %2 = load i32, i32* %i, align 4
  %3 = add i32 %2, 1
  %4 = icmp sle i32 %3, 10
  br i1 %4, label %l1.body, label %l1.end

l1.body:                                          ; preds = %l1.head
  %5 = load i32, i32* %i, align 4
  %6 = add i32 %5, 1
  store i32 %6, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i32 %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  br label %b1.start

b1.start:                                         ; preds = %l1.body
  %8 = load i32, i32* %i, align 4
  %9 = icmp sgt i32 %8, 2
  br i1 %9, label %then, label %else

b1.end:                                           ; preds = %ifcont
  %10 = load i32, i32* %i, align 4
  %11 = icmp sgt i32 %10, 2
  br i1 %11, label %then1, label %else2

then:                                             ; preds = %b1.start
  br label %l1.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont

else:                                             ; preds = %b1.start
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_exit
  br label %b1.end

then1:                                            ; preds = %b1.end
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  br label %ifcont3

else2:                                            ; preds = %b1.end
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  br label %l1.head

l1.end:                                           ; preds = %then, %l1.head
  %12 = load i32, i32* %i, align 4
  %13 = icmp eq i32 %12, 3
  br i1 %13, label %then4, label %else5

then4:                                            ; preds = %l1.end
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  br label %ifcont6

else5:                                            ; preds = %l1.end
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
